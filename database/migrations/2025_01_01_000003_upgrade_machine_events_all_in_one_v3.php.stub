<?php

/**
 * EventMachine v3.0 Upgrade Migration - All-in-One for Small Datasets
 * 
 * ⚠️  WARNING: This migration is ONLY for small datasets (< 100,000 records)
 * For larger datasets, use the two-step migration process instead.
 * 
 * This migration combines all upgrade steps:
 * 1. Adds new LONGBLOB columns
 * 2. Copies existing data (uncompressed)
 * 3. Drops old columns and renames new ones
 * 
 * Run `php artisan machine:check-upgrade` first to determine the best approach.
 */

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\DB;

return new class extends Migration
{
    protected int $maxRecords = 100000;
    protected int $chunkSize = 1000;

    public function up(): void
    {
        // Safety check: Count records
        $recordCount = DB::table('machine_events')->count();
        
        if ($recordCount > $this->maxRecords) {
            throw new \RuntimeException(
                "This all-in-one migration is designed for small datasets only. " .
                "Your table has {$recordCount} records (max: {$this->maxRecords}). " .
                "Please use the two-step migration process instead. " .
                "Run: php artisan machine:check-upgrade for guidance."
            );
        }

        $this->info("Starting all-in-one migration for {$recordCount} records...");

        // Step 1: Add new LONGBLOB columns
        $this->info('Step 1/3: Adding new columns...');
        Schema::table('machine_events', function (Blueprint $table) {
            $table->longText('payload_compressed')->charset('binary')->nullable()->after('payload');
            $table->longText('context_compressed')->charset('binary')->nullable()->after('context');
            $table->longText('meta_compressed')->charset('binary')->nullable()->after('meta');
        });

        // Step 2: Copy data
        $this->info('Step 2/3: Copying data...');
        $this->copyData();

        // Step 3: Drop old columns and rename
        $this->info('Step 3/3: Completing schema changes...');
        Schema::table('machine_events', function (Blueprint $table) {
            $table->dropColumn(['payload', 'context', 'meta']);
        });

        Schema::table('machine_events', function (Blueprint $table) {
            $table->renameColumn('payload_compressed', 'payload');
            $table->renameColumn('context_compressed', 'context');
            $table->renameColumn('meta_compressed', 'meta');
        });

        $this->info('✅ All-in-one migration completed successfully!');
        $this->info('');
        $this->info('Next step: Run `php artisan machine:compress-events` to compress the data.');
    }

    public function down(): void
    {
        // Rename columns back
        Schema::table('machine_events', function (Blueprint $table) {
            $table->renameColumn('payload', 'payload_compressed');
            $table->renameColumn('context', 'context_compressed');
            $table->renameColumn('meta', 'meta_compressed');
        });

        // Add JSON columns back
        Schema::table('machine_events', function (Blueprint $table) {
            $table->json('payload')->nullable()->after('version');
            $table->json('context')->nullable()->after('payload_compressed');
            $table->json('meta')->nullable()->after('context_compressed');
        });

        // Note: Data migration back would need to be handled manually
        $this->warn('⚠️  Rollback completed, but data needs to be migrated back manually.');
    }

    protected function copyData(): void
    {
        $totalCopied = 0;

        DB::table('machine_events')
            ->orderBy('id')
            ->chunk($this->chunkSize, function ($events) use (&$totalCopied) {
                $updates = [];

                foreach ($events as $event) {
                    $update = ['id' => $event->id];

                    // Copy payload as-is (JSON string to binary column)
                    if ($event->payload !== null) {
                        $update['payload_compressed'] = $event->payload;
                    }

                    // Copy context as-is (JSON string to binary column)
                    if ($event->context !== null) {
                        $update['context_compressed'] = $event->context;
                    }

                    // Copy meta as-is (JSON string to binary column)
                    if ($event->meta !== null) {
                        $update['meta_compressed'] = $event->meta;
                    }

                    $updates[] = $update;
                }

                // Batch update records
                DB::transaction(function () use ($updates) {
                    foreach ($updates as $update) {
                        DB::table('machine_events')
                            ->where('id', $update['id'])
                            ->update(array_filter($update, fn($key) => $key !== 'id', ARRAY_FILTER_USE_KEY));
                    }
                });

                $totalCopied += count($updates);
                
                if ($totalCopied % 10000 === 0) {
                    $this->info("  Copied {$totalCopied} records...");
                }
            });

        $this->info("  Data copy completed. Total records: {$totalCopied}");
    }

    protected function info(string $message): void
    {
        if (app()->runningInConsole()) {
            echo $message . PHP_EOL;
        }
    }

    protected function warn(string $message): void
    {
        if (app()->runningInConsole()) {
            echo "\033[33m" . $message . "\033[0m" . PHP_EOL;
        }
    }
};